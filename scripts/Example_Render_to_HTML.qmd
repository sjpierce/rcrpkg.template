---
title: "Example Script for Rendering HTML Output"
author: 
  - name: Steven J. Pierce
    orcid: 0000-0002-0679-3019
    email: pierces1@msu.edu
    affiliations: 
      - name: Michigan State University, Center for Statistical Training and Consulting
date: now
date-modified: last-modified
date-format: YYYY-MM-DD HH:mm:ss z
params:
  SourceDir: "scripts/"
  SourceFile: "Example_Render_to_HTML.qmd"
  LogFile: "Example_Render_to_HTML.html"
format: 
  html:
    toc: true
    toc-depth: 3
    toc-location: left
    number-sections: true
    number-depth: 3
    code-fold: show
    code-tools: true
    code-line-numbers: false
    embed-resources: true 
    anchor-sections: true
execute:
  eval: true
  echo: fenced
  output: true
  warning: true
  error: true
  include: true
knitr:
  opts_chunk: 
    message: true
---

# Purpose
This script provides a template example you can use to jump-start creating a 
new report that writes HTML output. It illustrates some convenient features of
Quarto.

# Setup
Global R chunk options are defined in the YAML header but local chunk options 
will over-ride global options. We can temporarily disable an individual chunk by 
inserting `#| eval: false` on a line at the top of the chunk. 

``` {r}
#| label: test-message1

# This message should show in results because of global options in YAML. 
message("test message 1")
```

``` {r}
#| label: test-message2
#| message: false

# This message should not show in results because of chunk-level options. 
message("test message 2")
```

## Declare Path
This next chunk declares the path to this script relative to the project-level 
root directory. If the file is not in the right location under the project root
you'll get a warning message. This helps ensure relative paths are all working 
as expected. 

``` {r}
#| label: declare-path

# Declare path to this script relative to the project root directory.
here::i_am(path = paste0(params$SourceDir, params$SourceFile))
```

## Load Packages
Next we load R packages required for this script to work. 

```{r}
#| label: load-packages

library(devtools)   
library(here)       # for here(), i_am()
library(dplyr)      # for %>%, arrange(), filter(), group_by(), mutate(), etc.
library(tidyr)      # for pivot_longer(), pivot_wider(), etc.
library(rmarkdown)  # for render()
library(knitr)      # for kable()
options(kableExtra.latex.load_packages = FALSE)
library(kableExtra) 
library(piercer)    # for git_report()
library(quarto)     # for quarto_version()
```

# Heading Level 1
Put text here. 

## Heading Level 2
Put text here. 

### Heading Level 3
Put text here. 

#### Heading Level 4
The `toc-depth: 3` option in YAML means this heading is omitted from the side 
menu. The `number-depth: 3` option in YAML is why this heading lacks a section
number. 

# Examples of Callouts
These are examples of how to use callouts in Quarto documents. 

::: {.callout-note}
Note that there are five types of callouts, including:
`note`, `warning`, `important`, `tip`, and `caution`.
:::

::: {.callout-important}
This is an example of an important callout without a caption.
:::

::: {.callout-warning}
This is an example of an warning callout without a caption.
:::

::: {.callout-tip}
# Tip With Caption
This is an example of a tip callout with a caption.
:::

::: {.callout-caution collapse="true"}
# Caution: Expand To Learn About Collapse
This is an example of a 'folded' caution callout that can be expanded by the
user. You can use `collapse="true"` to collapse it by default or
`collapse="false"` to make a collapsible callout that is expanded by default.
:::



# Example Table
See @tbl-Test for an example of the table created below. 

```{r}
#| label: tbl-Test
#| tbl-cap: Here's a Simple Table Caption.

FN <- "This is the footnote."

# Create some data.
MyData <- data.frame(x = 1:5, y = 2:6, z = 3:7, a = 4:8) 

# Create a table and add a footnote. 
kable(MyData, format = "html") %>% 
  footnote(general = FN, general_title = "Note: ", footnote_as_chunk = TRUE,
           threeparttable = TRUE)
```

::: {.callout-tip}
## Tip: Setting the Table Caption
Use the `tbl-cap` chunk option to set the table caption rather than using the 
`caption = ` argument to `kable()`. 
:::

# Example Figure
Below is @fig-example, which is pretty simple. 

```{r}
#| label: fig-example
#| fig-cap: !expr paste("Here's a Computed", 
#|                      "Figure Caption.")
#| fig-width: 6
#| fig-height: 4

plot(MyData)
```

::: {.callout-tip}
## Tip: Setting the Figure Caption
Use the `fig-cap` chunk option to set the figure caption. Here you can see the 
use of `!expr` preceding inline r code that computes a dynamic caption. 
:::

# Exaple Graphvis Diagram
Here is an example diagram. Notice that it does not get a Figure number by 
default. We can also just use the `DiagrammeR` package to generate a figure 
that gets numbered. 

```{dot}
digraph D {
  A -> {B, C, D} -> {F}
}
```

# Software Information
Show information about the current software environment. We could put the 
contents of this section in a collapsed callout instead. 

We used [R](https://www.r-project.org/) as our main computing environment and 
[Quarto](https://quarto.org/) scripts to enhance reproducibility. We used 
[RStudio](www.rstudio.org) as the editor to interface with R and Quarto. 

- Software chain:
  **qmd file > RStudio > Quarto > R > knitr > md file > Pandoc > HTML file**.
- Source file: **`r params$SourceFile`**
- Output file: **`r params$LogFile`**
- [Quarto `r quarto_version()`](https://quarto.org/) runs `*.qmd` files through 
  [R](https://www.r-project.org/) and [knitr](https://yihui.org/knitr/) to 
  produce `*.md` markdown files.
- [Pandoc `r rmarkdown::pandoc_version()`](https://pandoc.org) converts markdown 
  files (`*.md`) to other formats, including LaTeX (`*.tex`) and HTML (`*.html`) 
  among others.

\FloatBarrier

## Versions
This document was generated using the following computational environment and 
dependencies: 

``` {r}
#| label: show-version
#| echo: true

# Get R and R package version numbers in use.
devtools::session_info()
```

\FloatBarrier

## Git Details
The current Git commit details and status are:

``` {r}
#| label: git-details
#| echo: true

git_report()
```
